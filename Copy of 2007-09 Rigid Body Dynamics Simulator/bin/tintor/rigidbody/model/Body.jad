// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) annotate 
// Source File Name:   Body.java

package tintor.rigidbody.model;

import tintor.geometry.*;
import tintor.opengl.GLA;

// Referenced classes of package tintor.rigidbody.model:
//            Shape

public final class Body
{
    public static final class State extends Enum
    {

        public static State[] values()
        {
            State astate[];
            int i;
            State astate1[];
            System.arraycopy(astate = ENUM$VALUES, 0, astate1 = new State[i = astate.length], 0, i);
        //    0    0:getstatic       #27  <Field Body$State[] ENUM$VALUES>
        //    1    3:dup             
        //    2    4:astore_0        
        //    3    5:iconst_0        
        //    4    6:aload_0         
        //    5    7:arraylength     
        //    6    8:dup             
        //    7    9:istore_1        
        //    8   10:anewarray       State[]
        //    9   13:dup             
        //   10   14:astore_2        
        //   11   15:iconst_0        
        //   12   16:iload_1         
        //   13   17:invokestatic    #35  <Method void System.arraycopy(Object, int, Object, int, int)>
            return astate1;
        //   14   20:aload_2         
        //   15   21:areturn         
        }

        public static State valueOf(String s)
        {
            return (State)Enum.valueOf(tintor/rigidbody/model/Body$State, s);
        //    0    0:ldc1            #1   <Class Body$State>
        //    1    2:aload_0         
        //    2    3:invokestatic    #43  <Method Enum Enum.valueOf(Class, String)>
        //    3    6:checkcast       #1   <Class Body$State>
        //    4    9:areturn         
        }

        public static final State Fixed;
        public static final State Static;
        public static final State Dynamic;
        private static final State ENUM$VALUES[];

        static 
        {
            Fixed = new State("Fixed", 0);
        //    0    0:new             #1   <Class Body$State>
        //    1    3:dup             
        //    2    4:ldc1            #14  <String "Fixed">
        //    3    6:iconst_0        
        //    4    7:invokespecial   #15  <Method void Body$State(String, int)>
        //    5   10:putstatic       #19  <Field Body$State Fixed>
            Static = new State("Static", 1);
        //    6   13:new             #1   <Class Body$State>
        //    7   16:dup             
        //    8   17:ldc1            #21  <String "Static">
        //    9   19:iconst_1        
        //   10   20:invokespecial   #15  <Method void Body$State(String, int)>
        //   11   23:putstatic       #22  <Field Body$State Static>
            Dynamic = new State("Dynamic", 2);
        //   12   26:new             #1   <Class Body$State>
        //   13   29:dup             
        //   14   30:ldc1            #24  <String "Dynamic">
        //   15   32:iconst_2        
        //   16   33:invokespecial   #15  <Method void Body$State(String, int)>
        //   17   36:putstatic       #25  <Field Body$State Dynamic>
            ENUM$VALUES = (new State[] {
                Fixed, Static, Dynamic
            });
        //   18   39:iconst_3        
        //   19   40:anewarray       State[]
        //   20   43:dup             
        //   21   44:iconst_0        
        //   22   45:getstatic       #19  <Field Body$State Fixed>
        //   23   48:aastore         
        //   24   49:dup             
        //   25   50:iconst_1        
        //   26   51:getstatic       #22  <Field Body$State Static>
        //   27   54:aastore         
        //   28   55:dup             
        //   29   56:iconst_2        
        //   30   57:getstatic       #25  <Field Body$State Dynamic>
        //   31   60:aastore         
        //   32   61:putstatic       #27  <Field Body$State[] ENUM$VALUES>
        //*  33   64:return          
        }

        private State(String s, int i)
        {
            super(s, i);
        //    0    0:aload_0         
        //    1    1:aload_1         
        //    2    2:iload_2         
        //    3    3:invokespecial   #31  <Method void Enum(String, int)>
        //    4    6:return          
        }
    }


    public Body(Vector3 position, Quaternion orientation, Shape shape, float density)
    {
    //    0    0:aload_0         
    //    1    1:invokespecial   #68  <Method void Object()>
        color = GLA.blue;
    //    2    4:aload_0         
    //    3    5:getstatic       #70  <Field Vector3 GLA.blue>
    //    4    8:putfield        #75  <Field Vector3 color>
        state = State.Dynamic;
    //    5   11:aload_0         
    //    6   12:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //    7   15:putfield        #82  <Field Body$State state>
        linPos = Vector3.Zero;
    //    8   18:aload_0         
    //    9   19:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   10   22:putfield        #89  <Field Vector3 linPos>
        angPos = Quaternion.Identity;
    //   11   25:aload_0         
    //   12   26:getstatic       #91  <Field Quaternion Quaternion.Identity>
    //   13   29:putfield        #96  <Field Quaternion angPos>
        linVel = Vector3.Zero;
    //   14   32:aload_0         
    //   15   33:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   16   36:putfield        #98  <Field Vector3 linVel>
        angVel = Vector3.Zero;
    //   17   39:aload_0         
    //   18   40:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   19   43:putfield        #100 <Field Vector3 angVel>
        biasLinVel = Vector3.Zero;
    //   20   46:aload_0         
    //   21   47:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   22   50:putfield        #102 <Field Vector3 biasLinVel>
        biasAngVel = Vector3.Zero;
    //   23   53:aload_0         
    //   24   54:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   25   57:putfield        #104 <Field Vector3 biasAngVel>
        force = Vector3.Zero;
    //   26   60:aload_0         
    //   27   61:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   28   64:putfield        #106 <Field Vector3 force>
        torque = Vector3.Zero;
    //   29   67:aload_0         
    //   30   68:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   31   71:putfield        #108 <Field Vector3 torque>
        elasticity = 0.5F;
    //   32   74:aload_0         
    //   33   75:ldc1            #110 <Float 0.5F>
    //   34   77:putfield        #111 <Field float elasticity>
        drag = 0.003F;
    //   35   80:aload_0         
    //   36   81:ldc1            #113 <Float 0.003F>
    //   37   83:putfield        #114 <Field float drag>
        sfriction = 0.6F;
    //   38   86:aload_0         
    //   39   87:ldc1            #116 <Float 0.6F>
    //   40   89:putfield        #117 <Field float sfriction>
        dfriction = 0.4F;
    //   41   92:aload_0         
    //   42   93:ldc1            #119 <Float 0.4F>
    //   43   95:putfield        #120 <Field float dfriction>
        id = ID++;
    //   44   98:aload_0         
    //   45   99:getstatic       #61  <Field int ID>
    //   46  102:dup             
    //   47  103:iconst_1        
    //   48  104:iadd            
    //   49  105:putstatic       #61  <Field int ID>
    //   50  108:putfield        #122 <Field int id>
        linPos = position;
    //   51  111:aload_0         
    //   52  112:aload_1         
    //   53  113:putfield        #89  <Field Vector3 linPos>
        angPos = orientation;
    //   54  116:aload_0         
    //   55  117:aload_2         
    //   56  118:putfield        #96  <Field Quaternion angPos>
        transform = new Transform3(orientation, position);
    //   57  121:aload_0         
    //   58  122:new             #124 <Class Transform3>
    //   59  125:dup             
    //   60  126:aload_2         
    //   61  127:aload_1         
    //   62  128:invokespecial   #126 <Method void Transform3(Quaternion, Vector3)>
    //   63  131:putfield        #129 <Field Transform3 transform>
        this.shape = shape;
    //   64  134:aload_0         
    //   65  135:aload_3         
    //   66  136:putfield        #131 <Field Shape shape>
        mass = density * shape.volume();
    //   67  139:aload_0         
    //   68  140:fload           4
    //   69  142:aload_3         
    //   70  143:invokevirtual   #133 <Method float Shape.volume()>
    //   71  146:fmul            
    //   72  147:putfield        #139 <Field float mass>
        imass = 1.0F / mass;
    //   73  150:aload_0         
    //   74  151:fconst_1        
    //   75  152:aload_0         
    //   76  153:getfield        #139 <Field float mass>
    //   77  156:fdiv            
    //   78  157:putfield        #141 <Field float imass>
        Ibody = shape.inertiaTensor().mul(density);
    //   79  160:aload_0         
    //   80  161:aload_3         
    //   81  162:invokevirtual   #143 <Method Matrix3 Shape.inertiaTensor()>
    //   82  165:fload           4
    //   83  167:invokevirtual   #147 <Method Matrix3 Matrix3.mul(float)>
    //   84  170:putfield        #153 <Field Matrix3 Ibody>
        I = transform.m.mul(Ibody).mul(transform.m.transpose());
    //   85  173:aload_0         
    //   86  174:aload_0         
    //   87  175:getfield        #129 <Field Transform3 transform>
    //   88  178:getfield        #155 <Field Matrix3 Transform3.m>
    //   89  181:aload_0         
    //   90  182:getfield        #153 <Field Matrix3 Ibody>
    //   91  185:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   92  188:aload_0         
    //   93  189:getfield        #129 <Field Transform3 transform>
    //   94  192:getfield        #155 <Field Matrix3 Transform3.m>
    //   95  195:invokevirtual   #161 <Method Matrix3 Matrix3.transpose()>
    //   96  198:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   97  201:putfield        #164 <Field Matrix3 I>
        invI = I.inv();
    //   98  204:aload_0         
    //   99  205:aload_0         
    //  100  206:getfield        #164 <Field Matrix3 I>
    //  101  209:invokevirtual   #166 <Method Matrix3 Matrix3.inv()>
    //  102  212:putfield        #169 <Field Matrix3 invI>
        if(!$assertionsDisabled && !invariant())
    //* 103  215:getstatic       #52  <Field boolean $assertionsDisabled>
    //* 104  218:ifne            236
    //* 105  221:aload_0         
    //* 106  222:invokespecial   #171 <Method boolean invariant()>
    //* 107  225:ifne            236
            throw new AssertionError();
    //  108  228:new             #174 <Class AssertionError>
    //  109  231:dup             
    //  110  232:invokespecial   #176 <Method void AssertionError()>
    //  111  235:athrow          
        else
            return;
    //  112  236:return          
    }

    private boolean invariant()
    {
        if(!$assertionsDisabled && !linPos.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            28
    //*   2    6:aload_0         
    //*   3    7:getfield        #89  <Field Vector3 linPos>
    //*   4   10:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   5   13:ifne            28
            throw new AssertionError(linPos);
    //    6   16:new             #174 <Class AssertionError>
    //    7   19:dup             
    //    8   20:aload_0         
    //    9   21:getfield        #89  <Field Vector3 linPos>
    //   10   24:invokespecial   #185 <Method void AssertionError(Object)>
    //   11   27:athrow          
        if(!$assertionsDisabled && !angPos.isFinite())
    //*  12   28:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  13   31:ifne            52
    //*  14   34:aload_0         
    //*  15   35:getfield        #96  <Field Quaternion angPos>
    //*  16   38:invokevirtual   #188 <Method boolean Quaternion.isFinite()>
    //*  17   41:ifne            52
            throw new AssertionError();
    //   18   44:new             #174 <Class AssertionError>
    //   19   47:dup             
    //   20   48:invokespecial   #176 <Method void AssertionError()>
    //   21   51:athrow          
        if(!$assertionsDisabled && !linVel.isFinite())
    //*  22   52:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  23   55:ifne            76
    //*  24   58:aload_0         
    //*  25   59:getfield        #98  <Field Vector3 linVel>
    //*  26   62:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  27   65:ifne            76
            throw new AssertionError();
    //   28   68:new             #174 <Class AssertionError>
    //   29   71:dup             
    //   30   72:invokespecial   #176 <Method void AssertionError()>
    //   31   75:athrow          
        if(!$assertionsDisabled && !angVel.isFinite())
    //*  32   76:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  33   79:ifne            100
    //*  34   82:aload_0         
    //*  35   83:getfield        #100 <Field Vector3 angVel>
    //*  36   86:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  37   89:ifne            100
            throw new AssertionError();
    //   38   92:new             #174 <Class AssertionError>
    //   39   95:dup             
    //   40   96:invokespecial   #176 <Method void AssertionError()>
    //   41   99:athrow          
        if(!$assertionsDisabled && !force.isFinite())
    //*  42  100:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  43  103:ifne            124
    //*  44  106:aload_0         
    //*  45  107:getfield        #106 <Field Vector3 force>
    //*  46  110:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  47  113:ifne            124
            throw new AssertionError();
    //   48  116:new             #174 <Class AssertionError>
    //   49  119:dup             
    //   50  120:invokespecial   #176 <Method void AssertionError()>
    //   51  123:athrow          
        if(!$assertionsDisabled && !torque.isFinite())
    //*  52  124:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  53  127:ifne            148
    //*  54  130:aload_0         
    //*  55  131:getfield        #108 <Field Vector3 torque>
    //*  56  134:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  57  137:ifne            148
            throw new AssertionError();
    //   58  140:new             #174 <Class AssertionError>
    //   59  143:dup             
    //   60  144:invokespecial   #176 <Method void AssertionError()>
    //   61  147:athrow          
        if(!$assertionsDisabled && (!invI.a.isFinite() || !invI.b.isFinite() || !invI.c.isFinite()))
    //*  62  148:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  63  151:ifne            201
    //*  64  154:aload_0         
    //*  65  155:getfield        #169 <Field Matrix3 invI>
    //*  66  158:getfield        #189 <Field Vector3 Matrix3.a>
    //*  67  161:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  68  164:ifeq            193
    //*  69  167:aload_0         
    //*  70  168:getfield        #169 <Field Matrix3 invI>
    //*  71  171:getfield        #192 <Field Vector3 Matrix3.b>
    //*  72  174:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  73  177:ifeq            193
    //*  74  180:aload_0         
    //*  75  181:getfield        #169 <Field Matrix3 invI>
    //*  76  184:getfield        #195 <Field Vector3 Matrix3.c>
    //*  77  187:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  78  190:ifne            201
            throw new AssertionError();
    //   79  193:new             #174 <Class AssertionError>
    //   80  196:dup             
    //   81  197:invokespecial   #176 <Method void AssertionError()>
    //   82  200:athrow          
        else
            return true;
    //   83  201:iconst_1        
    //   84  202:ireturn         
    }

    public float kinetic()
    {
        return (mass * linVel.square() + angVel.dot(I.mul(angVel))) / 2.0F;
    //    0    0:aload_0         
    //    1    1:getfield        #139 <Field float mass>
    //    2    4:aload_0         
    //    3    5:getfield        #98  <Field Vector3 linVel>
    //    4    8:invokevirtual   #199 <Method float Vector3.square()>
    //    5   11:fmul            
    //    6   12:aload_0         
    //    7   13:getfield        #100 <Field Vector3 angVel>
    //    8   16:aload_0         
    //    9   17:getfield        #164 <Field Matrix3 I>
    //   10   20:aload_0         
    //   11   21:getfield        #100 <Field Vector3 angVel>
    //   12   24:invokevirtual   #202 <Method Vector3 Matrix3.mul(Vector3)>
    //   13   27:invokevirtual   #205 <Method float Vector3.dot(Vector3)>
    //   14   30:fadd            
    //   15   31:fconst_2        
    //   16   32:fdiv            
    //   17   33:freturn         
    }

    public void integrateVel(float dt)
    {
        if(state == State.Dynamic)
    //*   0    0:aload_0         
    //*   1    1:getfield        #82  <Field Body$State state>
    //*   2    4:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //*   3    7:if_acmpne       75
        {
            linVel = linVel.add(dt * imass, force);
    //    4   10:aload_0         
    //    5   11:aload_0         
    //    6   12:getfield        #98  <Field Vector3 linVel>
    //    7   15:fload_1         
    //    8   16:aload_0         
    //    9   17:getfield        #141 <Field float imass>
    //   10   20:fmul            
    //   11   21:aload_0         
    //   12   22:getfield        #106 <Field Vector3 force>
    //   13   25:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   14   28:putfield        #98  <Field Vector3 linVel>
            angVel = angVel.add(dt, invI.mul(torque.sub(angVel.cross(I.mul(angVel)))));
    //   15   31:aload_0         
    //   16   32:aload_0         
    //   17   33:getfield        #100 <Field Vector3 angVel>
    //   18   36:fload_1         
    //   19   37:aload_0         
    //   20   38:getfield        #169 <Field Matrix3 invI>
    //   21   41:aload_0         
    //   22   42:getfield        #108 <Field Vector3 torque>
    //   23   45:aload_0         
    //   24   46:getfield        #100 <Field Vector3 angVel>
    //   25   49:aload_0         
    //   26   50:getfield        #164 <Field Matrix3 I>
    //   27   53:aload_0         
    //   28   54:getfield        #100 <Field Vector3 angVel>
    //   29   57:invokevirtual   #202 <Method Vector3 Matrix3.mul(Vector3)>
    //   30   60:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   31   63:invokevirtual   #218 <Method Vector3 Vector3.sub(Vector3)>
    //   32   66:invokevirtual   #202 <Method Vector3 Matrix3.mul(Vector3)>
    //   33   69:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   34   72:putfield        #100 <Field Vector3 angVel>
        }
        force = torque = Vector3.Zero;
    //   35   75:aload_0         
    //   36   76:aload_0         
    //   37   77:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   38   80:dup_x1          
    //   39   81:putfield        #108 <Field Vector3 torque>
    //   40   84:putfield        #106 <Field Vector3 force>
        if(!$assertionsDisabled && !invariant())
    //*  41   87:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  42   90:ifne            108
    //*  43   93:aload_0         
    //*  44   94:invokespecial   #171 <Method boolean invariant()>
    //*  45   97:ifne            108
            throw new AssertionError();
    //   46  100:new             #174 <Class AssertionError>
    //   47  103:dup             
    //   48  104:invokespecial   #176 <Method void AssertionError()>
    //   49  107:athrow          
        else
            return;
    //   50  108:return          
    }

    public void integratePos(float dt)
    {
        if(state == State.Dynamic)
    //*   0    0:aload_0         
    //*   1    1:getfield        #82  <Field Body$State state>
    //*   2    4:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //*   3    7:if_acmpne       224
        {
            linPos = linPos.add(dt, linVel.add(biasLinVel));
    //    4   10:aload_0         
    //    5   11:aload_0         
    //    6   12:getfield        #89  <Field Vector3 linPos>
    //    7   15:fload_1         
    //    8   16:aload_0         
    //    9   17:getfield        #98  <Field Vector3 linVel>
    //   10   20:aload_0         
    //   11   21:getfield        #102 <Field Vector3 biasLinVel>
    //   12   24:invokevirtual   #223 <Method Vector3 Vector3.add(Vector3)>
    //   13   27:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   14   30:putfield        #89  <Field Vector3 linPos>
            angPos = angPos.add(angVel.add(biasAngVel).mul(angPos).mul(dt / 2.0F)).unit();
    //   15   33:aload_0         
    //   16   34:aload_0         
    //   17   35:getfield        #96  <Field Quaternion angPos>
    //   18   38:aload_0         
    //   19   39:getfield        #100 <Field Vector3 angVel>
    //   20   42:aload_0         
    //   21   43:getfield        #104 <Field Vector3 biasAngVel>
    //   22   46:invokevirtual   #223 <Method Vector3 Vector3.add(Vector3)>
    //   23   49:aload_0         
    //   24   50:getfield        #96  <Field Quaternion angPos>
    //   25   53:invokevirtual   #225 <Method Quaternion Vector3.mul(Quaternion)>
    //   26   56:fload_1         
    //   27   57:fconst_2        
    //   28   58:fdiv            
    //   29   59:invokevirtual   #228 <Method Quaternion Quaternion.mul(float)>
    //   30   62:invokevirtual   #231 <Method Quaternion Quaternion.add(Quaternion)>
    //   31   65:invokevirtual   #233 <Method Quaternion Quaternion.unit()>
    //   32   68:putfield        #96  <Field Quaternion angPos>
            biasLinVel = biasAngVel = Vector3.Zero;
    //   33   71:aload_0         
    //   34   72:aload_0         
    //   35   73:getstatic       #84  <Field Vector3 Vector3.Zero>
    //   36   76:dup_x1          
    //   37   77:putfield        #104 <Field Vector3 biasAngVel>
    //   38   80:putfield        #102 <Field Vector3 biasLinVel>
            transform = new Transform3(angPos, linPos);
    //   39   83:aload_0         
    //   40   84:new             #124 <Class Transform3>
    //   41   87:dup             
    //   42   88:aload_0         
    //   43   89:getfield        #96  <Field Quaternion angPos>
    //   44   92:aload_0         
    //   45   93:getfield        #89  <Field Vector3 linPos>
    //   46   96:invokespecial   #126 <Method void Transform3(Quaternion, Vector3)>
    //   47   99:putfield        #129 <Field Transform3 transform>
            I = transform.m.mul(Ibody).mul(transform.m.transpose());
    //   48  102:aload_0         
    //   49  103:aload_0         
    //   50  104:getfield        #129 <Field Transform3 transform>
    //   51  107:getfield        #155 <Field Matrix3 Transform3.m>
    //   52  110:aload_0         
    //   53  111:getfield        #153 <Field Matrix3 Ibody>
    //   54  114:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   55  117:aload_0         
    //   56  118:getfield        #129 <Field Transform3 transform>
    //   57  121:getfield        #155 <Field Matrix3 Transform3.m>
    //   58  124:invokevirtual   #161 <Method Matrix3 Matrix3.transpose()>
    //   59  127:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   60  130:putfield        #164 <Field Matrix3 I>
            invI = I.inv();
    //   61  133:aload_0         
    //   62  134:aload_0         
    //   63  135:getfield        #164 <Field Matrix3 I>
    //   64  138:invokevirtual   #166 <Method Matrix3 Matrix3.inv()>
    //   65  141:putfield        #169 <Field Matrix3 invI>
            if(AutoSleep && linVel.square() <= SleepMaxVelocitySquared && angVel.square() * GMath.square(shape.radius) <= SleepMaxVelocitySquared)
    //*  66  144:getstatic       #54  <Field boolean AutoSleep>
    //*  67  147:ifeq            219
    //*  68  150:aload_0         
    //*  69  151:getfield        #98  <Field Vector3 linVel>
    //*  70  154:invokevirtual   #199 <Method float Vector3.square()>
    //*  71  157:getstatic       #59  <Field float SleepMaxVelocitySquared>
    //*  72  160:fcmpg           
    //*  73  161:ifgt            219
    //*  74  164:aload_0         
    //*  75  165:getfield        #100 <Field Vector3 angVel>
    //*  76  168:invokevirtual   #199 <Method float Vector3.square()>
    //*  77  171:aload_0         
    //*  78  172:getfield        #131 <Field Shape shape>
    //*  79  175:getfield        #237 <Field float Shape.radius>
    //*  80  178:invokestatic    #240 <Method float GMath.square(float)>
    //*  81  181:fmul            
    //*  82  182:getstatic       #59  <Field float SleepMaxVelocitySquared>
    //*  83  185:fcmpg           
    //*  84  186:ifgt            219
            {
                idleFrames++;
    //   85  189:aload_0         
    //   86  190:dup             
    //   87  191:getfield        #245 <Field int idleFrames>
    //   88  194:iconst_1        
    //   89  195:iadd            
    //   90  196:putfield        #245 <Field int idleFrames>
                if(idleFrames >= SleepIdleFrames)
    //*  91  199:aload_0         
    //*  92  200:getfield        #245 <Field int idleFrames>
    //*  93  203:getstatic       #56  <Field int SleepIdleFrames>
    //*  94  206:icmplt          224
                    state = State.Static;
    //   95  209:aload_0         
    //   96  210:getstatic       #247 <Field Body$State Body$State.Static>
    //   97  213:putfield        #82  <Field Body$State state>
            } else
    //*  98  216:goto            224
            {
                idleFrames = 0;
    //   99  219:aload_0         
    //  100  220:iconst_0        
    //  101  221:putfield        #245 <Field int idleFrames>
            }
        }
        if(!$assertionsDisabled && !invariant())
    //* 102  224:getstatic       #52  <Field boolean $assertionsDisabled>
    //* 103  227:ifne            245
    //* 104  230:aload_0         
    //* 105  231:invokespecial   #171 <Method boolean invariant()>
    //* 106  234:ifne            245
            throw new AssertionError();
    //  107  237:new             #174 <Class AssertionError>
    //  108  240:dup             
    //  109  241:invokespecial   #176 <Method void AssertionError()>
    //  110  244:athrow          
        else
            return;
    //  111  245:return          
    }

    public void advanceTransforms(float dt)
    {
        transform = new Transform3(angPos.add(angVel.mul(angPos).mul(dt / 2.0F)), linPos.add(dt, linVel));
    //    0    0:aload_0         
    //    1    1:new             #124 <Class Transform3>
    //    2    4:dup             
    //    3    5:aload_0         
    //    4    6:getfield        #96  <Field Quaternion angPos>
    //    5    9:aload_0         
    //    6   10:getfield        #100 <Field Vector3 angVel>
    //    7   13:aload_0         
    //    8   14:getfield        #96  <Field Quaternion angPos>
    //    9   17:invokevirtual   #225 <Method Quaternion Vector3.mul(Quaternion)>
    //   10   20:fload_1         
    //   11   21:fconst_2        
    //   12   22:fdiv            
    //   13   23:invokevirtual   #228 <Method Quaternion Quaternion.mul(float)>
    //   14   26:invokevirtual   #231 <Method Quaternion Quaternion.add(Quaternion)>
    //   15   29:aload_0         
    //   16   30:getfield        #89  <Field Vector3 linPos>
    //   17   33:fload_1         
    //   18   34:aload_0         
    //   19   35:getfield        #98  <Field Vector3 linVel>
    //   20   38:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   21   41:invokespecial   #126 <Method void Transform3(Quaternion, Vector3)>
    //   22   44:putfield        #129 <Field Transform3 transform>
    //   23   47:return          
    }

    public void addForce(Vector3 f)
    {
        if(!$assertionsDisabled && !force.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            24
    //*   2    6:aload_0         
    //*   3    7:getfield        #106 <Field Vector3 force>
    //*   4   10:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   5   13:ifne            24
            throw new AssertionError();
    //    6   16:new             #174 <Class AssertionError>
    //    7   19:dup             
    //    8   20:invokespecial   #176 <Method void AssertionError()>
    //    9   23:athrow          
        force = force.add(f);
    //   10   24:aload_0         
    //   11   25:aload_0         
    //   12   26:getfield        #106 <Field Vector3 force>
    //   13   29:aload_1         
    //   14   30:invokevirtual   #223 <Method Vector3 Vector3.add(Vector3)>
    //   15   33:putfield        #106 <Field Vector3 force>
        if(!$assertionsDisabled && !invariant())
    //*  16   36:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  17   39:ifne            57
    //*  18   42:aload_0         
    //*  19   43:invokespecial   #171 <Method boolean invariant()>
    //*  20   46:ifne            57
            throw new AssertionError();
    //   21   49:new             #174 <Class AssertionError>
    //   22   52:dup             
    //   23   53:invokespecial   #176 <Method void AssertionError()>
    //   24   56:athrow          
        else
            return;
    //   25   57:return          
    }

    public void addTorque(Vector3 t)
    {
        if(!$assertionsDisabled && !torque.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            24
    //*   2    6:aload_0         
    //*   3    7:getfield        #108 <Field Vector3 torque>
    //*   4   10:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   5   13:ifne            24
            throw new AssertionError();
    //    6   16:new             #174 <Class AssertionError>
    //    7   19:dup             
    //    8   20:invokespecial   #176 <Method void AssertionError()>
    //    9   23:athrow          
        torque = torque.add(t);
    //   10   24:aload_0         
    //   11   25:aload_0         
    //   12   26:getfield        #108 <Field Vector3 torque>
    //   13   29:aload_1         
    //   14   30:invokevirtual   #223 <Method Vector3 Vector3.add(Vector3)>
    //   15   33:putfield        #108 <Field Vector3 torque>
        if(!$assertionsDisabled && !invariant())
    //*  16   36:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  17   39:ifne            57
    //*  18   42:aload_0         
    //*  19   43:invokespecial   #171 <Method boolean invariant()>
    //*  20   46:ifne            57
            throw new AssertionError();
    //   21   49:new             #174 <Class AssertionError>
    //   22   52:dup             
    //   23   53:invokespecial   #176 <Method void AssertionError()>
    //   24   56:athrow          
        else
            return;
    //   25   57:return          
    }

    public void addLinAcc(Vector3 acc)
    {
        if(!$assertionsDisabled && !acc.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            21
    //*   2    6:aload_1         
    //*   3    7:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   4   10:ifne            21
            throw new AssertionError();
    //    5   13:new             #174 <Class AssertionError>
    //    6   16:dup             
    //    7   17:invokespecial   #176 <Method void AssertionError()>
    //    8   20:athrow          
        force = force.add(mass, acc);
    //    9   21:aload_0         
    //   10   22:aload_0         
    //   11   23:getfield        #106 <Field Vector3 force>
    //   12   26:aload_0         
    //   13   27:getfield        #139 <Field float mass>
    //   14   30:aload_1         
    //   15   31:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   16   34:putfield        #106 <Field Vector3 force>
        if(!$assertionsDisabled && !invariant())
    //*  17   37:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  18   40:ifne            58
    //*  19   43:aload_0         
    //*  20   44:invokespecial   #171 <Method boolean invariant()>
    //*  21   47:ifne            58
            throw new AssertionError();
    //   22   50:new             #174 <Class AssertionError>
    //   23   53:dup             
    //   24   54:invokespecial   #176 <Method void AssertionError()>
    //   25   57:athrow          
        else
            return;
    //   26   58:return          
    }

    public static void transferImpulse(Vector3 impulse, Body bodyA, Body bodyB, Vector3 ra, Vector3 rb)
    {
        if(!$assertionsDisabled && !impulse.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            21
    //*   2    6:aload_0         
    //*   3    7:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   4   10:ifne            21
            throw new AssertionError();
    //    5   13:new             #174 <Class AssertionError>
    //    6   16:dup             
    //    7   17:invokespecial   #176 <Method void AssertionError()>
    //    8   20:athrow          
        if(!$assertionsDisabled && !ra.cross(impulse).isFinite())
    //*   9   21:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  10   24:ifne            70
    //*  11   27:aload_3         
    //*  12   28:aload_0         
    //*  13   29:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //*  14   32:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  15   35:ifne            70
            throw new AssertionError((new StringBuilder()).append(ra).append(" ").append(impulse).toString());
    //   16   38:new             #174 <Class AssertionError>
    //   17   41:dup             
    //   18   42:new             #260 <Class StringBuilder>
    //   19   45:dup             
    //   20   46:invokespecial   #262 <Method void StringBuilder()>
    //   21   49:aload_3         
    //   22   50:invokevirtual   #263 <Method StringBuilder StringBuilder.append(Object)>
    //   23   53:ldc2            #267 <String " ">
    //   24   56:invokevirtual   #269 <Method StringBuilder StringBuilder.append(String)>
    //   25   59:aload_0         
    //   26   60:invokevirtual   #263 <Method StringBuilder StringBuilder.append(Object)>
    //   27   63:invokevirtual   #272 <Method String StringBuilder.toString()>
    //   28   66:invokespecial   #185 <Method void AssertionError(Object)>
    //   29   69:athrow          
        if(!$assertionsDisabled && !rb.cross(impulse).isFinite())
    //*  30   70:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  31   73:ifne            96
    //*  32   76:aload           4
    //*  33   78:aload_0         
    //*  34   79:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //*  35   82:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  36   85:ifne            96
            throw new AssertionError();
    //   37   88:new             #174 <Class AssertionError>
    //   38   91:dup             
    //   39   92:invokespecial   #176 <Method void AssertionError()>
    //   40   95:athrow          
        bodyA.linVel = bodyA.linVel.add(bodyA.imass, impulse);
    //   41   96:aload_1         
    //   42   97:aload_1         
    //   43   98:getfield        #98  <Field Vector3 linVel>
    //   44  101:aload_1         
    //   45  102:getfield        #141 <Field float imass>
    //   46  105:aload_0         
    //   47  106:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   48  109:putfield        #98  <Field Vector3 linVel>
        bodyA.angVel = bodyA.angVel.add(bodyA.invI, ra.cross(impulse));
    //   49  112:aload_1         
    //   50  113:aload_1         
    //   51  114:getfield        #100 <Field Vector3 angVel>
    //   52  117:aload_1         
    //   53  118:getfield        #169 <Field Matrix3 invI>
    //   54  121:aload_3         
    //   55  122:aload_0         
    //   56  123:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   57  126:invokevirtual   #276 <Method Vector3 Vector3.add(Matrix3, Vector3)>
    //   58  129:putfield        #100 <Field Vector3 angVel>
        bodyB.linVel = bodyB.linVel.sub(bodyB.imass, impulse);
    //   59  132:aload_2         
    //   60  133:aload_2         
    //   61  134:getfield        #98  <Field Vector3 linVel>
    //   62  137:aload_2         
    //   63  138:getfield        #141 <Field float imass>
    //   64  141:aload_0         
    //   65  142:invokevirtual   #279 <Method Vector3 Vector3.sub(float, Vector3)>
    //   66  145:putfield        #98  <Field Vector3 linVel>
        bodyB.angVel = bodyB.angVel.sub(bodyB.invI, rb.cross(impulse));
    //   67  148:aload_2         
    //   68  149:aload_2         
    //   69  150:getfield        #100 <Field Vector3 angVel>
    //   70  153:aload_2         
    //   71  154:getfield        #169 <Field Matrix3 invI>
    //   72  157:aload           4
    //   73  159:aload_0         
    //   74  160:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   75  163:invokevirtual   #281 <Method Vector3 Vector3.sub(Matrix3, Vector3)>
    //   76  166:putfield        #100 <Field Vector3 angVel>
        if(bodyA.state == State.Static)
    //*  77  169:aload_1         
    //*  78  170:getfield        #82  <Field Body$State state>
    //*  79  173:getstatic       #247 <Field Body$State Body$State.Static>
    //*  80  176:if_acmpne       186
            bodyA.state = State.Dynamic;
    //   81  179:aload_1         
    //   82  180:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //   83  183:putfield        #82  <Field Body$State state>
        if(bodyB.state == State.Static)
    //*  84  186:aload_2         
    //*  85  187:getfield        #82  <Field Body$State state>
    //*  86  190:getstatic       #247 <Field Body$State Body$State.Static>
    //*  87  193:if_acmpne       203
            bodyB.state = State.Dynamic;
    //   88  196:aload_2         
    //   89  197:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //   90  200:putfield        #82  <Field Body$State state>
        if(!$assertionsDisabled && !bodyA.invariant())
    //*  91  203:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  92  206:ifne            224
    //*  93  209:aload_1         
    //*  94  210:invokespecial   #171 <Method boolean invariant()>
    //*  95  213:ifne            224
            throw new AssertionError();
    //   96  216:new             #174 <Class AssertionError>
    //   97  219:dup             
    //   98  220:invokespecial   #176 <Method void AssertionError()>
    //   99  223:athrow          
        if(!$assertionsDisabled && !bodyB.invariant())
    //* 100  224:getstatic       #52  <Field boolean $assertionsDisabled>
    //* 101  227:ifne            245
    //* 102  230:aload_2         
    //* 103  231:invokespecial   #171 <Method boolean invariant()>
    //* 104  234:ifne            245
            throw new AssertionError();
    //  105  237:new             #174 <Class AssertionError>
    //  106  240:dup             
    //  107  241:invokespecial   #176 <Method void AssertionError()>
    //  108  244:athrow          
        else
            return;
    //  109  245:return          
    }

    public static void transferBiasImpulse(Vector3 impulse, Body bodyA, Body bodyB, Vector3 ra, Vector3 rb)
    {
        if(!$assertionsDisabled && !impulse.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            21
    //*   2    6:aload_0         
    //*   3    7:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   4   10:ifne            21
            throw new AssertionError();
    //    5   13:new             #174 <Class AssertionError>
    //    6   16:dup             
    //    7   17:invokespecial   #176 <Method void AssertionError()>
    //    8   20:athrow          
        if(!$assertionsDisabled && !ra.cross(impulse).isFinite())
    //*   9   21:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  10   24:ifne            70
    //*  11   27:aload_3         
    //*  12   28:aload_0         
    //*  13   29:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //*  14   32:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  15   35:ifne            70
            throw new AssertionError((new StringBuilder()).append(ra).append(" ").append(impulse).toString());
    //   16   38:new             #174 <Class AssertionError>
    //   17   41:dup             
    //   18   42:new             #260 <Class StringBuilder>
    //   19   45:dup             
    //   20   46:invokespecial   #262 <Method void StringBuilder()>
    //   21   49:aload_3         
    //   22   50:invokevirtual   #263 <Method StringBuilder StringBuilder.append(Object)>
    //   23   53:ldc2            #267 <String " ">
    //   24   56:invokevirtual   #269 <Method StringBuilder StringBuilder.append(String)>
    //   25   59:aload_0         
    //   26   60:invokevirtual   #263 <Method StringBuilder StringBuilder.append(Object)>
    //   27   63:invokevirtual   #272 <Method String StringBuilder.toString()>
    //   28   66:invokespecial   #185 <Method void AssertionError(Object)>
    //   29   69:athrow          
        if(!$assertionsDisabled && !rb.cross(impulse).isFinite())
    //*  30   70:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  31   73:ifne            96
    //*  32   76:aload           4
    //*  33   78:aload_0         
    //*  34   79:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //*  35   82:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*  36   85:ifne            96
            throw new AssertionError();
    //   37   88:new             #174 <Class AssertionError>
    //   38   91:dup             
    //   39   92:invokespecial   #176 <Method void AssertionError()>
    //   40   95:athrow          
        bodyA.biasLinVel = bodyA.biasLinVel.add(bodyA.imass, impulse);
    //   41   96:aload_1         
    //   42   97:aload_1         
    //   43   98:getfield        #102 <Field Vector3 biasLinVel>
    //   44  101:aload_1         
    //   45  102:getfield        #141 <Field float imass>
    //   46  105:aload_0         
    //   47  106:invokevirtual   #211 <Method Vector3 Vector3.add(float, Vector3)>
    //   48  109:putfield        #102 <Field Vector3 biasLinVel>
        bodyA.biasAngVel = bodyA.biasAngVel.add(bodyA.invI, ra.cross(impulse));
    //   49  112:aload_1         
    //   50  113:aload_1         
    //   51  114:getfield        #104 <Field Vector3 biasAngVel>
    //   52  117:aload_1         
    //   53  118:getfield        #169 <Field Matrix3 invI>
    //   54  121:aload_3         
    //   55  122:aload_0         
    //   56  123:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   57  126:invokevirtual   #276 <Method Vector3 Vector3.add(Matrix3, Vector3)>
    //   58  129:putfield        #104 <Field Vector3 biasAngVel>
        bodyB.biasLinVel = bodyB.biasLinVel.sub(bodyB.imass, impulse);
    //   59  132:aload_2         
    //   60  133:aload_2         
    //   61  134:getfield        #102 <Field Vector3 biasLinVel>
    //   62  137:aload_2         
    //   63  138:getfield        #141 <Field float imass>
    //   64  141:aload_0         
    //   65  142:invokevirtual   #279 <Method Vector3 Vector3.sub(float, Vector3)>
    //   66  145:putfield        #102 <Field Vector3 biasLinVel>
        bodyB.biasAngVel = bodyB.biasAngVel.sub(bodyB.invI, rb.cross(impulse));
    //   67  148:aload_2         
    //   68  149:aload_2         
    //   69  150:getfield        #104 <Field Vector3 biasAngVel>
    //   70  153:aload_2         
    //   71  154:getfield        #169 <Field Matrix3 invI>
    //   72  157:aload           4
    //   73  159:aload_0         
    //   74  160:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   75  163:invokevirtual   #281 <Method Vector3 Vector3.sub(Matrix3, Vector3)>
    //   76  166:putfield        #104 <Field Vector3 biasAngVel>
        if(bodyA.state == State.Static)
    //*  77  169:aload_1         
    //*  78  170:getfield        #82  <Field Body$State state>
    //*  79  173:getstatic       #247 <Field Body$State Body$State.Static>
    //*  80  176:if_acmpne       186
            bodyA.state = State.Dynamic;
    //   81  179:aload_1         
    //   82  180:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //   83  183:putfield        #82  <Field Body$State state>
        if(bodyB.state == State.Static)
    //*  84  186:aload_2         
    //*  85  187:getfield        #82  <Field Body$State state>
    //*  86  190:getstatic       #247 <Field Body$State Body$State.Static>
    //*  87  193:if_acmpne       203
            bodyB.state = State.Dynamic;
    //   88  196:aload_2         
    //   89  197:getstatic       #77  <Field Body$State Body$State.Dynamic>
    //   90  200:putfield        #82  <Field Body$State state>
        if(!$assertionsDisabled && !bodyA.invariant())
    //*  91  203:getstatic       #52  <Field boolean $assertionsDisabled>
    //*  92  206:ifne            224
    //*  93  209:aload_1         
    //*  94  210:invokespecial   #171 <Method boolean invariant()>
    //*  95  213:ifne            224
            throw new AssertionError();
    //   96  216:new             #174 <Class AssertionError>
    //   97  219:dup             
    //   98  220:invokespecial   #176 <Method void AssertionError()>
    //   99  223:athrow          
        if(!$assertionsDisabled && !bodyB.invariant())
    //* 100  224:getstatic       #52  <Field boolean $assertionsDisabled>
    //* 101  227:ifne            245
    //* 102  230:aload_2         
    //* 103  231:invokespecial   #171 <Method boolean invariant()>
    //* 104  234:ifne            245
            throw new AssertionError();
    //  105  237:new             #174 <Class AssertionError>
    //  106  240:dup             
    //  107  241:invokespecial   #176 <Method void AssertionError()>
    //  108  244:athrow          
        else
            return;
    //  109  245:return          
    }

    public Vector3 velAt(Vector3 r)
    {
        if(!$assertionsDisabled && !r.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            21
    //*   2    6:aload_1         
    //*   3    7:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   4   10:ifne            21
            throw new AssertionError();
    //    5   13:new             #174 <Class AssertionError>
    //    6   16:dup             
    //    7   17:invokespecial   #176 <Method void AssertionError()>
    //    8   20:athrow          
        else
            return linVel.add(angVel.cross(r));
    //    9   21:aload_0         
    //   10   22:getfield        #98  <Field Vector3 linVel>
    //   11   25:aload_0         
    //   12   26:getfield        #100 <Field Vector3 angVel>
    //   13   29:aload_1         
    //   14   30:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   15   33:invokevirtual   #223 <Method Vector3 Vector3.add(Vector3)>
    //   16   36:areturn         
    }

    public Vector3 bVelAt(Vector3 r)
    {
        if(!$assertionsDisabled && !r.isFinite())
    //*   0    0:getstatic       #52  <Field boolean $assertionsDisabled>
    //*   1    3:ifne            21
    //*   2    6:aload_1         
    //*   3    7:invokevirtual   #182 <Method boolean Vector3.isFinite()>
    //*   4   10:ifne            21
            throw new AssertionError();
    //    5   13:new             #174 <Class AssertionError>
    //    6   16:dup             
    //    7   17:invokespecial   #176 <Method void AssertionError()>
    //    8   20:athrow          
        else
            return biasLinVel.add(biasAngVel.cross(r));
    //    9   21:aload_0         
    //   10   22:getfield        #102 <Field Vector3 biasLinVel>
    //   11   25:aload_0         
    //   12   26:getfield        #104 <Field Vector3 biasAngVel>
    //   13   29:aload_1         
    //   14   30:invokevirtual   #215 <Method Vector3 Vector3.cross(Vector3)>
    //   15   33:invokevirtual   #223 <Method Vector3 Vector3.add(Vector3)>
    //   16   36:areturn         
    }

    public Matrix3 imassAt(Vector3 r)
    {
        Matrix3 rt = r.tilda();
    //    0    0:aload_1         
    //    1    1:invokevirtual   #294 <Method Matrix3 Vector3.tilda()>
    //    2    4:astore_2        
        return (new Matrix3(imass)).sub(rt.mul(invI).mul(rt));
    //    3    5:new             #148 <Class Matrix3>
    //    4    8:dup             
    //    5    9:aload_0         
    //    6   10:getfield        #141 <Field float imass>
    //    7   13:invokespecial   #297 <Method void Matrix3(float)>
    //    8   16:aload_2         
    //    9   17:aload_0         
    //   10   18:getfield        #169 <Field Matrix3 invI>
    //   11   21:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   12   24:aload_2         
    //   13   25:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   14   28:invokevirtual   #299 <Method Matrix3 Matrix3.sub(Matrix3)>
    //   15   31:areturn         
    }

    public static Matrix3 imassAt(Body bodyA, Body bodyB, Vector3 ra, Vector3 rb)
    {
        if(bodyA.state == State.Fixed)
    //*   0    0:aload_0         
    //*   1    1:getfield        #82  <Field Body$State state>
    //*   2    4:getstatic       #303 <Field Body$State Body$State.Fixed>
    //*   3    7:if_acmpne       16
            return bodyB.imassAt(rb);
    //    4   10:aload_1         
    //    5   11:aload_3         
    //    6   12:invokevirtual   #306 <Method Matrix3 imassAt(Vector3)>
    //    7   15:areturn         
        if(bodyB.state == State.Fixed)
    //*   8   16:aload_1         
    //*   9   17:getfield        #82  <Field Body$State state>
    //*  10   20:getstatic       #303 <Field Body$State Body$State.Fixed>
    //*  11   23:if_acmpne       32
        {
            return bodyA.imassAt(ra);
    //   12   26:aload_0         
    //   13   27:aload_2         
    //   14   28:invokevirtual   #306 <Method Matrix3 imassAt(Vector3)>
    //   15   31:areturn         
        } else
        {
            Matrix3 rat = ra.tilda();
    //   16   32:aload_2         
    //   17   33:invokevirtual   #294 <Method Matrix3 Vector3.tilda()>
    //   18   36:astore          4
            Matrix3 rbt = rb.tilda();
    //   19   38:aload_3         
    //   20   39:invokevirtual   #294 <Method Matrix3 Vector3.tilda()>
    //   21   42:astore          5
            Matrix3 Ma = rat.mul(bodyA.invI).mul(rat);
    //   22   44:aload           4
    //   23   46:aload_0         
    //   24   47:getfield        #169 <Field Matrix3 invI>
    //   25   50:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   26   53:aload           4
    //   27   55:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   28   58:astore          6
            Matrix3 Mb = rbt.mul(bodyB.invI).mul(rbt);
    //   29   60:aload           5
    //   30   62:aload_1         
    //   31   63:getfield        #169 <Field Matrix3 invI>
    //   32   66:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   33   69:aload           5
    //   34   71:invokevirtual   #158 <Method Matrix3 Matrix3.mul(Matrix3)>
    //   35   74:astore          7
            return (new Matrix3(bodyA.imass + bodyB.imass)).sub(Ma).sub(Mb);
    //   36   76:new             #148 <Class Matrix3>
    //   37   79:dup             
    //   38   80:aload_0         
    //   39   81:getfield        #141 <Field float imass>
    //   40   84:aload_1         
    //   41   85:getfield        #141 <Field float imass>
    //   42   88:fadd            
    //   43   89:invokespecial   #297 <Method void Matrix3(float)>
    //   44   92:aload           6
    //   45   94:invokevirtual   #299 <Method Matrix3 Matrix3.sub(Matrix3)>
    //   46   97:aload           7
    //   47   99:invokevirtual   #299 <Method Matrix3 Matrix3.sub(Matrix3)>
    //   48  102:areturn         
        }
    }

    public Interval interval(Vector3 axis)
    {
        return shape.interval(transform.iapplyV(axis)).shift(transform.v.dot(axis));
    //    0    0:aload_0         
    //    1    1:getfield        #131 <Field Shape shape>
    //    2    4:aload_0         
    //    3    5:getfield        #129 <Field Transform3 transform>
    //    4    8:aload_1         
    //    5    9:invokevirtual   #314 <Method Vector3 Transform3.iapplyV(Vector3)>
    //    6   12:invokevirtual   #317 <Method Interval Shape.interval(Vector3)>
    //    7   15:aload_0         
    //    8   16:getfield        #129 <Field Transform3 transform>
    //    9   19:getfield        #319 <Field Vector3 Transform3.v>
    //   10   22:aload_1         
    //   11   23:invokevirtual   #205 <Method float Vector3.dot(Vector3)>
    //   12   26:invokevirtual   #322 <Method Interval Interval.shift(float)>
    //   13   29:areturn         
    }

    public Vector3 position()
    {
        return linPos;
    //    0    0:aload_0         
    //    1    1:getfield        #89  <Field Vector3 linPos>
    //    2    4:areturn         
    }

    public Quaternion orientation()
    {
        return angPos;
    //    0    0:aload_0         
    //    1    1:getfield        #96  <Field Quaternion angPos>
    //    2    4:areturn         
    }

    public Vector3 linVelocity()
    {
        return linVel;
    //    0    0:aload_0         
    //    1    1:getfield        #98  <Field Vector3 linVel>
    //    2    4:areturn         
    }

    public Vector3 angVelocity()
    {
        return angVel;
    //    0    0:aload_0         
    //    1    1:getfield        #100 <Field Vector3 angVel>
    //    2    4:areturn         
    }

    public void setLinVelocity(Vector3 a)
    {
        linVel = a;
    //    0    0:aload_0         
    //    1    1:aload_1         
    //    2    2:putfield        #98  <Field Vector3 linVel>
    //    3    5:return          
    }

    public void setAngVelocity(Vector3 a)
    {
        angVel = a;
    //    0    0:aload_0         
    //    1    1:aload_1         
    //    2    2:putfield        #100 <Field Vector3 angVel>
    //    3    5:return          
    }

    public Transform3 transform()
    {
        return transform;
    //    0    0:aload_0         
    //    1    1:getfield        #129 <Field Transform3 transform>
    //    2    4:areturn         
    }

    public Matrix3 invI()
    {
        return invI;
    //    0    0:aload_0         
    //    1    1:getfield        #169 <Field Matrix3 invI>
    //    2    4:areturn         
    }

    public String toString()
    {
        return name == null ? Integer.toString(id) : name;
    //    0    0:aload_0         
    //    1    1:getfield        #335 <Field String name>
    //    2    4:ifnull          14
    //    3    7:aload_0         
    //    4    8:getfield        #335 <Field String name>
    //    5   11:goto            21
    //    6   14:aload_0         
    //    7   15:getfield        #122 <Field int id>
    //    8   18:invokestatic    #337 <Method String Integer.toString(int)>
    //    9   21:areturn         
    }

    public int hashCode()
    {
        return id;
    //    0    0:aload_0         
    //    1    1:getfield        #122 <Field int id>
    //    2    4:ireturn         
    }

    public static boolean AutoSleep = true;
    public static int SleepIdleFrames = 20;
    public static float SleepMaxVelocitySquared = 1E-005F;
    public float mass;
    public float imass;
    private final Matrix3 Ibody;
    private Matrix3 I;
    private Matrix3 invI;
    private Transform3 transform;
    public Vector3 color;
    public final Shape shape;
    public State state;
    public String name;
    public int idleFrames;
    private Vector3 linPos;
    private Quaternion angPos;
    private Vector3 linVel;
    private Vector3 angVel;
    private Vector3 biasLinVel;
    private Vector3 biasAngVel;
    private Vector3 force;
    private Vector3 torque;
    public float elasticity;
    public float drag;
    public float sfriction;
    public float dfriction;
    private static int ID = 0;
    public final int id;
    static final boolean $assertionsDisabled = !tintor/rigidbody/model/Body.desiredAssertionStatus();

    static 
    {
    //    0    0:ldc1            #1   <Class Body>
    //    1    2:invokevirtual   #46  <Method boolean Class.desiredAssertionStatus()>
    //    2    5:ifne            12
    //    3    8:iconst_1        
    //    4    9:goto            13
    //    5   12:iconst_0        
    //    6   13:putstatic       #52  <Field boolean $assertionsDisabled>
    //    7   16:iconst_1        
    //    8   17:putstatic       #54  <Field boolean AutoSleep>
    //    9   20:bipush          20
    //   10   22:putstatic       #56  <Field int SleepIdleFrames>
    //   11   25:ldc1            #58  <Float 1E-005F>
    //   12   27:putstatic       #59  <Field float SleepMaxVelocitySquared>
    //   13   30:iconst_0        
    //   14   31:putstatic       #61  <Field int ID>
    //*  15   34:return          
    }
}
